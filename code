import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Vector;

class TrieNode {
    static final int alphabets = 26;
    TrieNode[] links;
    boolean flag;

    TrieNode() {
        links = new TrieNode[alphabets];
        flag = false;
    }

    boolean containsKey(char ch) {
        return links[ch - 'a'] != null;
    }

    TrieNode getSpecificChar(char ch) {
        return links[ch - 'a'];
    }

    void putSpecificChar(char ch, TrieNode node) {
        links[ch - 'a'] = node;
    }

    boolean isEnd() {
        return flag;
    }

    void setEnd() {
        flag = true;
    }

    void makeFalse() {
        flag = false;
    }
}

class Solution {
    TrieNode root;

    Solution() {
        root = new TrieNode();
    }

    void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node.containsKey(word.charAt(i))) {
                node.putSpecificChar(word.charAt(i), new TrieNode());
            }
            node = node.getSpecificChar(word.charAt(i));
        }
        node.setEnd();
    }

    boolean search(String s, int i, TrieNode temp) {
        if (i == s.length()) {
            return temp.isEnd();
        }
        if (temp.isEnd()) {
            if (search(s, i, root))
                return true;
        }
        if (temp.containsKey(s.charAt(i))) {
            return search(s, i + 1, temp.getSpecificChar(s.charAt(i)));
        } else {
            return false;
        }
    }

    void st(String s, int i, TrieNode temp) {
        if (i == s.length()) {
            temp.makeFalse();
            return;
        }
        st(s, i + 1, temp.getSpecificChar(s.charAt(i)));
    }

    static boolean cmp(String a, String b) {
        if (a.length() == b.length())
            return a.compareTo(b) < 0;
        return a.length() > b.length();
    }

    void longestWord(Vector<String> words) {
        Vector<String> ans = new Vector<String>();
        for (int i = 0; i < words.size(); i++) {
            ans.add(words.get(i));
            insert(words.get(i));
        }
        ans.sort(new Comparator<String>() {
            @Override
            public int compare(String a, String b) {
                return cmp(a, b) ? -1 : 1;
            }
        });

        String ans1 = "", ans2 = "";
        for (int i = 0; i < ans.size(); i++) {
            st(ans.get(i), 0, root);

            if (search(ans.get(i), 0, root)) {
                if (ans1.length() == 0)
                    ans1 = ans.get(i);
                else {
                    ans2 = ans.get(i);
                    break;
                }
            }
            insert(ans.get(i));
        }
        System.out.println("Longest Compounded word: " + ans1);
        System.out.println("Second Longest Compounded word: " + ans2);
    }
}

public class Main {
    public static void main(String[] args) {
        Solution st = new Solution();
        String filename;
        int ch;
        System.out.println("Enter the file which you want to process : \n 1.Input_01.txt \n 2.Input_02.txt \n");
        ch = 1; // Change this value to 1 or 2 as needed
        switch (ch) {
            case 1:
                filename = "Input_01.txt";
                break;
            case 2:
                filename = "Input_02.txt";
                break;
            default:
                filename = "error.txt";
        }

        Vector<String> ans = new Vector<String>();

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                ans.addAll(Arrays.asList(line.split("\\s+")));
            }
        } catch (IOException e) {
            System.out.println("You are not able to open this file.");
            return;
        }

        long startTime = System.nanoTime();
        st.longestWord(ans);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1000000; // in milliseconds
        System.out.println("Time taken to process " + filename + " :" + duration + " milliseconds");
    }
}
